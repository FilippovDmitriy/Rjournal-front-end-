import React, {useEffect, useState} from 'react';
import Head from "next/head";
import Header from "../components/Header";
import LeftSide from "../components/LeftSide";
import CommentsSide from "../components/CommentsSide";
import classNames from "classnames";
import {useAppDispatch, useAppSelector} from "../redux/hooks";
import {selectIsVisibleLeftSide, setIsVisibleLeftSide} from "../redux/slices/mainLayout";
import TopBarProgress from "react-topbar-progress-indicator";
import {Router} from "next/router";
import DrawerLeftSide from "../components/LeftSide/DrawerLeftSide";
import {useAdaptive} from "../utils/hooks/useAdaptive";
import {md1, md2} from "../utils/constants/widthVariables";
import Footer from "../components/Footer";

type Props = {
    fullWidth?: boolean
    isLargeSize?: boolean
    maxWidth?: boolean
    hideMenu?: boolean
    hideComments?: boolean
    title?: string
};

TopBarProgress.config({
    barColors: {
        "0": "#E5A64D",
        "1.0": "#E5A64D"
    }
})

const MainLayout: React.FC<Props> = ({
                                         title = 'RJournal',
                                         isLargeSize = false,
                                         maxWidth = false,
                                         fullWidth = false,
                                         hideMenu = false,
                                         hideComments = false,
                                         children
                                     }) => {
    const [isVisibleComments, setIsVisibleComments] = useState(!hideComments);
    const [isDrawer, setIsDrawer] = useState(false);
    const [progress, setProgress] = useState(false);

    const isVisibleLeftSide = useAppSelector(selectIsVisibleLeftSide);
    const dispatch = useAppDispatch();

    const enableDrawerLeftSide = () => {
        dispatch(setIsVisibleLeftSide(false));
        setIsDrawer(true);
    };
    const disableDrawerLeftSide = () => {
        dispatch(setIsVisibleLeftSide(true));
        setIsDrawer(false);
    };
    const toggleIsVisibleLeftSide = () => {
        dispatch(setIsVisibleLeftSide(!isVisibleLeftSide));
    };
    const handleRouterEventsStart = () => {
        setProgress(true);
    };
    const handleRouterEventsComplete = () => {
        setProgress(false);
    };
    const handleResize = () => {
        if (window.innerWidth <= md1) {
            setIsVisibleComments(false);
            if (isLargeSize) {
                enableDrawerLeftSide();
            } else {
                disableDrawerLeftSide();
            }
        } else {
            setIsVisibleComments(!hideComments);
            if (isLargeSize) {
                disableDrawerLeftSide();
            } else {
                enableDrawerLeftSide();
            }
        }

        if (window.innerWidth <= md2) {
            enableDrawerLeftSide();
        } else {
            if (!isLargeSize) {
                disableDrawerLeftSide();
            }
        }
    };

    useEffect(() => {
        Router.events.on("routeChangeStart", handleRouterEventsStart);
        Router.events.on("routeChangeComplete", handleRouterEventsComplete);
        return () => {
            Router.events.off("routeChangeStart", handleRouterEventsStart);
            Router.events.off("routeChangeComplete", handleRouterEventsComplete);
        };
    }, [])
    useAdaptive(handleResize);

    return (
        <>
            <Head>
                <title>{title}</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Header/>
            {progress && <TopBarProgress style={{top: '50px'}}/>}
            <main className={'wrapper'}>
                {(isVisibleLeftSide && !hideMenu) &&
                <div className="leftSide">
                    {isDrawer
                        ? <DrawerLeftSide isOpenDrawer={isVisibleLeftSide}
                                          onCloseDrawer={() => dispatch(setIsVisibleLeftSide(false))}
                                          toggleIsVisibleLeftSide={toggleIsVisibleLeftSide}/>
                        : <LeftSide/>}
                </div>
                }
                <div className={classNames('content', {
                    'largeContent': isLargeSize,
                    'fullContent': fullWidth,
                    'maxContent': maxWidth,
                })}>
                    {children}
                </div>
                {isVisibleComments &&
                <div className="rightSide">
                    <CommentsSide/>
                </div>
                }
            </main>
            <Footer/>
        </>
    );
};

export default MainLayout;
